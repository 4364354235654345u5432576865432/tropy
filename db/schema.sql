--
-- This file is auto-generated by executing all current
-- migrations. Instead of editing this file, please create
-- migrations to incrementally modify the database, and
-- then regenerate this schema file.
--
-- To create a new empty migration, run:
--   npm run db -- migration -- [name] [sql|js]
--
-- To re-generate this file, run:
--   npm run db -- migrate
--

-- Save the current migration number
PRAGMA user_version=1604191233;

-- Load sqlite3 .dump
PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE archive (
  archive_id TEXT PRIMARY KEY,
  name TEXT NOT NULL,
  settings TEXT NOT NULL,
  created_at DATETIME NOT NULL DEFAULT current_timestamp,
  opened_at DATETIME NOT NULL DEFAULT current_timestamp
) WITHOUT ROWID;
CREATE TABLE subjects (
  id INTEGER PRIMARY KEY,
  created_at DATETIME NOT NULL DEFAULT current_timestamp,
  updated_at DATETIME NOT NULL DEFAULT current_timestamp
);
CREATE TABLE images (
  id INTEGER PRIMARY KEY,
  width INTEGER NOT NULL DEFAULT 0,
  height INTEGER NOT NULL DEFAULT 0,
  FOREIGN KEY(id) REFERENCES subjects(id)
    ON DELETE CASCADE
) WITHOUT ROWID;
CREATE TABLE items (
  id INTEGER PRIMARY KEY,
  cover_image_id INTEGER,

  FOREIGN KEY(id) REFERENCES subjects(id)
    ON DELETE CASCADE,
  FOREIGN KEY (cover_image_id) REFERENCES images(id)
    ON DELETE SET NULL
) WITHOUT ROWID;
CREATE TABLE notes (
  note_id INTEGER PRIMARY KEY,
  text TEXT NOT NULL,
  created_at DATETIME NOT NULL DEFAULT current_timestamp,
  updated_at DATETIME NOT NULL DEFAULT current_timestamp
);
CREATE TABLE subject_notes (
  id INTEGER,
  note_id INTEGER,
  position INTEGER NOT NULL DEFAULT 0,

  PRIMARY KEY(id, note_id),
  UNIQUE(id, note_id, position),

  FOREIGN KEY(id) REFERENCES subjects(id)
    ON DELETE CASCADE,
  FOREIGN KEY(note_id) REFERENCES notes(note_id)
    ON DELETE CASCADE
) WITHOUT ROWID;
CREATE TABLE lists (
  list_id INTEGER PRIMARY KEY,
  name TEXT NOT NULL,
  parent_list_id INTEGER,
  created_at DATETIME NOT NULL DEFAULT current_timestamp,
  updated_at DATETIME NOT NULL DEFAULT current_timestamp,

  FOREIGN KEY(parent_list_id) REFERENCES lists(list_id)
    ON DELETE CASCADE
);
CREATE TABLE list_items (
  id INTEGER,
  list_id INTEGER,
  position INTEGER NOT NULL DEFAULT 0,

  PRIMARY KEY(id, list_id),
  UNIQUE(id, list_id, position),

  FOREIGN KEY(id) REFERENCES items(id)
    ON DELETE CASCADE,
  FOREIGN KEY(list_id) REFERENCES lists(list_id)
    ON DELETE CASCADE
) WITHOUT ROWID;
CREATE TABLE tags (
  tag_name TEXT PRIMARY KEY COLLATE NOCASE,
  tag_color,
  created_at DATETIME NOT NULL DEFAULT current_timestamp,
  updated_at DATETIME NOT NULL DEFAULT current_timestamp,

  CHECK (tag_name <> '')
);
CREATE TABLE subject_tags (
  id INTEGER,
  tag_name TEXT,
  tagged_at DATETIME NOT NULL DEFAULT current_timestamp,

  PRIMARY KEY(id, tag_name),

  FOREIGN KEY(id) REFERENCES subjects(id)
    ON DELETE CASCADE,
  FOREIGN KEY(tag_name) REFERENCES tags(tag_name)
    ON DELETE CASCADE
    ON UPDATE CASCADE
) WITHOUT ROWID;
CREATE TABLE trash (
  id INTEGER PRIMARY KEY,
  deleted_at DATETIME NOT NULL DEFAULT current_timestamp,

  FOREIGN KEY (id) REFERENCES subjects(id)
    ON DELETE CASCADE
) WITHOUT ROWID;
CREATE TABLE photos (
  id INTEGER PRIMARY KEY,
  item_id INTEGER NOT NULL,

  path TEXT NOT NULL,
  protocol TEXT NOT NULL DEFAULT 'file',
  mimetype TEXT NOT NULL,
  checksum TEXT NOT NULL,
  orientation INTEGER NOT NULL DEFAULT 1,
  exif TEXT,

  FOREIGN KEY (id) REFERENCES images(id) ON DELETE CASCADE,
  FOREIGN KEY (item_id) REFERENCES items(id) ON DELETE CASCADE
) WITHOUT ROWID;
CREATE TABLE selections (
  id INTEGER PRIMARY KEY,
  photo_id INTEGER NOT NULL,

  quality TEXT NOT NULL DEFAULT 'default',

  x NUMERIC NOT NULL DEFAULT 0,
  y NUMERIC NOT NULL DEFAULT 0,
  pct BOOLEAN NOT NULL DEFAULT FALSE,

  FOREIGN KEY (id) REFERENCES images(id) ON DELETE CASCADE,
  FOREIGN KEY (photo_id) REFERENCES photos(id) ON DELETE CASCADE,
  FOREIGN KEY(quality) REFERENCES image_qualities(quality)
    ON UPDATE CASCADE
    ON DELETE SET DEFAULT
) WITHOUT ROWID;
CREATE TABLE image_scales (
  id INTEGER PRIMARY KEY,
  x NUMERIC,
  y NUMERIC,
  factor NUMERIC,
  fit BOOLEAN NOT NULL DEFAULT FALSE,
  FOREIGN KEY (id) REFERENCES selections(id) ON DELETE CASCADE
) WITHOUT ROWID;
CREATE TABLE image_rotations (
  id INTEGER PRIMARY KEY,
  angle NUMERIC,
  mirror BOOLEAN NOT NULL DEFAULT FALSE,
  FOREIGN KEY (id) REFERENCES selections(id) ON DELETE CASCADE
) WITHOUT ROWID;
CREATE TABLE image_qualities (
  quality TEXT PRIMARY KEY
) WITHOUT ROWID;
INSERT INTO "image_qualities" VALUES('bitonal');
INSERT INTO "image_qualities" VALUES('color');
INSERT INTO "image_qualities" VALUES('default');
INSERT INTO "image_qualities" VALUES('gray');
CREATE TABLE metadata (
  id INTEGER,
  field_name TEXT,
  type_name TEXT,
  position INTEGER NOT NULL DEFAULT 0,

  value,

  PRIMARY KEY(id, field_name, type_name),
  UNIQUE(id, position),

  FOREIGN KEY(id) REFERENCES subjects(id)
    ON DELETE CASCADE,
  FOREIGN KEY(field_name, type_name) REFERENCES fields(field_name, type_name)
    ON DELETE CASCADE
  FOREIGN KEY(type_name) REFERENCES types(type_name)
    ON DELETE CASCADE
) WITHOUT ROWID;
CREATE TABLE fields (
  field_name TEXT NOT NULL COLLATE NOCASE,
  type_name TEXT NOT NULL COLLATE NOCASE,

  PRIMARY KEY(field_name, type_name),
  FOREIGN KEY(type_name) REFERENCES types(type_name)
    ON UPDATE CASCADE
) WITHOUT ROWID;
CREATE TABLE types (
  type_name TEXT PRIMARY KEY COLLATE NOCASE
) WITHOUT ROWID;
INSERT INTO "types" VALUES('boolean');
INSERT INTO "types" VALUES('datetime');
INSERT INTO "types" VALUES('name');
INSERT INTO "types" VALUES('numeric');
INSERT INTO "types" VALUES('text');
CREATE TABLE templates (
  id INTEGER PRIMARY KEY,
  template_name TEXT UNIQUE NOT NULL COLLATE NOCASE,

  FOREIGN KEY (id) REFERENCES items(id)
    ON DELETE CASCADE
) WITHOUT ROWID;
CREATE TABLE constraints (
  id INTEGER NOT NULL,
  field_name TEXT NOT NULL COLLATE NOCASE,
  type_name TEXT NOT NULL COLLATE NOCASE,
  definition,

  PRIMARY KEY (id, field_name, type_name),
  FOREIGN KEY (id) REFERENCES templates(id)
    ON DELETE CASCADE,
  FOREIGN KEY (field_name, type_name) REFERENCES fields(field_name, type_name)
    ON DELETE CASCADE
);
CREATE TRIGGER insert_tags
  AFTER INSERT ON tags
  BEGIN
    UPDATE tags
      SET tag_name = trim(tag_name)
      WHERE tag_name = NEW.tag_name;
  END;
CREATE TRIGGER update_tags
  AFTER UPDATE ON tags
  BEGIN
    UPDATE tags
      SET tag_name = trim(tag_name)
      WHERE tag_name = NEW.tag_name;
  END;
COMMIT;
PRAGMA foreign_keys=ON;